<h1>Join the fun</h1>

<form for="contributions" action="<%= contributions_url %>" method="POST">
  <input
  type="hidden"
  name="authenticity_token"
  value="<%= form_authenticity_token %>"
  >

  <canvas width="500" height="500" id="canvas_wrapper">
  </canvas>
  <div class="draw-tools">
    <button class="draw-color">Color</button>
    <button class="draw-weight">Weight</button>
    <button class="draw-undo">Undo</button>
    <button class="draw-redo">Redo</button>
    <button class="draw-reset">Reset</button>
  </div>
  <input type="submit">
</form>

<script type="text/javascript">
(function(){
  var $canvas_wrapper = $("#canvas_wrapper");
  var scribble = $canvas_wrapper.scribble(),
  scribbleFidel = $canvas_wrapper.data('scribble');

  var draw = {

    init: function() {
      this.scribbleSetDefaults();
      this.scribbleAddListeners();
    },

    currentOptions: {
      weight: 6,
      color: "529eff"
    },

    drawingOptions: {
      weight: [2 , 6, 12],
      color: [
        "ff199c" // red
        ,"ff9e00" // orange
        ,"b7f300" // green
        ,"529eff" // blue
        ,"272727" // black
      ]
    },

    updateCurrentOptions: function( new_options ) {
      for (var key in new_options) {
        this.currentOptions[key] = new_options[key];
      }
    },

    nextOption : function( option_type ) {
      var option_array = this.drawingOptions[option_type];
      var old_index = option_array.indexOf(this.currentOptions[option_type]);
      console.log(old_index);
      var new_value;

      // If we reach end of array, start back at beginning
      if ((old_index + 1) < option_array.length) {
        new_value = option_array[(old_index + 1)];
      }
      else {
        new_value = option_array[0];
      }

      // Update model
      var obj = {};
      obj[option_type] = new_value;
      this.updateCurrentOptions(obj);

      return new_value;
    },

    scribbleSetDefaults: function() {
      scribbleFidel.changeColor(this.currentOptions.color);
      scribbleFidel.changeSize(this.currentOptions.weight);
    },

    scribbleAddListeners: function() {
      $('.draw-weight').on('click touchend',function(e){
        e.preventDefault();
        scribbleFidel.changeSize(draw.nextOption('weight'));
      });
      $('.draw-color').on('click touchend',function(e){
        e.preventDefault();
        scribbleFidel.changeColor(draw.nextOption('color'));
      });
      $('.draw-undo').on('click touchend',function(e){
        e.preventDefault();
        scribbleFidel.undo();
      });
      $('.draw-redo').on('click touchend',function(e){
        e.preventDefault();
        scribbleFidel.redo();
      });
      $('.draw-reset').on('click touchend',function(e){
        e.preventDefault();
        scribbleFidel.clear();
      });
    }
  };

  draw.init();
})();

</script>
